fn E_Abort(MPI_Comm comm, int errorcode) -> int;
fn E_Accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win) -> int;
fn E_Add_error_class(int *errorclass) -> int;
fn E_Add_error_code(int errorclass, int *errorcode) -> int;
fn E_Add_error_string(int errorcode, const char *string) -> int;
fn E_Address(void *location, MPI_Aint *address) -> int;
fn E_Allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) -> int;
fn E_Allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm) -> int;
fn E_Alloc_mem(MPI_Aint size, MPI_Info info, void *baseptr) -> int;
fn E_Allreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) -> int;
fn E_Alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) -> int;
fn E_Alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm) -> int;
fn E_Alltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm) -> int;
fn E_Attr_delete(MPI_Comm comm, int keyval) -> int;
fn E_Attr_get(MPI_Comm comm, int keyval, void *attribute_val, int *flag) -> int;
fn E_Attr_put(MPI_Comm comm, int keyval, void *attribute_val) -> int;
fn E_Barrier(MPI_Comm comm) -> int;
fn E_Bcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm) -> int;
fn E_Bsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) -> int;
fn E_Bsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Buffer_attach(void *buffer, int size) -> int;
fn E_Buffer_detach(void *buffer, int *size) -> int;
fn E_Cancel(MPI_Request *request) -> int;
fn E_Cart_coords(MPI_Comm comm, int rank, int maxdims, int coords[]) -> int;
fn E_Cart_create(MPI_Comm old_comm, int ndims, const int dims[], const int periods[], int reorder, MPI_Comm *comm_cart) -> int;
fn E_Cart_get(MPI_Comm comm, int maxdims, int dims[], int periods[], int coords[]) -> int;
fn E_Cart_map(MPI_Comm comm, int ndims, const int dims[], const int periods[], int *newrank) -> int;
fn E_Cart_rank(MPI_Comm comm, const int coords[], int *rank) -> int;
fn E_Cart_shift(MPI_Comm comm, int direction, int disp, int *rank_source, int *rank_dest)  -> int;
fn E_Cart_sub(MPI_Comm comm, const int remain_dims[], MPI_Comm *new_comm) -> int;
fn E_Cartdim_get(MPI_Comm comm, int *ndims) -> int;
fn E_Close_port(const char *port_name) -> int;
fn E_Comm_accept(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm) -> int;
fn E_Comm_call_errhandler(MPI_Comm comm, int errorcode) -> int;
fn E_Comm_compare(MPI_Comm comm1, MPI_Comm comm2, int *result) -> int;
fn E_Comm_connect(const char *port_name, MPI_Info info, int root, MPI_Comm comm, MPI_Comm *newcomm) -> int;
fn E_Comm_create(MPI_Comm comm, MPI_Group group, MPI_Comm *newcomm) -> int;
fn E_Comm_create_errhandler(MPI_Comm_errhandler_function *function, MPI_Errhandler *errhandler) -> int;
fn E_Comm_create_group(MPI_Comm comm, MPI_Group group, int tag, MPI_Comm *newcomm) -> int;
fn E_Comm_create_keyval(MPI_Comm_copy_attr_function *comm_copy_attr_fn, MPI_Comm_delete_attr_function *comm_delete_attr_fn, int *comm_keyval, void *extra_state) -> int;
fn E_Comm_delete_attr(MPI_Comm comm, int comm_keyval) -> int;
fn E_Comm_disconnect(MPI_Comm *comm) -> int;
fn E_Comm_dup(MPI_Comm comm, MPI_Comm *newcomm) -> int;
fn E_Comm_dup_with_info(MPI_Comm comm, MPI_Info info, MPI_Comm *newcomm) -> int;
fn E_Comm_free(MPI_Comm *comm) -> int;
fn E_Comm_free_keyval(int *comm_keyval) -> int;
fn E_Comm_get_attr(MPI_Comm comm, int comm_keyval, void *attribute_val, int *flag) -> int;
fn E_Comm_get_errhandler(MPI_Comm comm, MPI_Errhandler *erhandler) -> int;
fn E_Comm_get_info(MPI_Comm comm, MPI_Info *info_used) -> int;
fn E_Comm_get_name(MPI_Comm comm, char *comm_name, int *resultlen) -> int;
fn E_Comm_get_parent(MPI_Comm *parent) -> int;
fn E_Comm_group(MPI_Comm comm, MPI_Group *group) -> int;
fn E_Comm_idup(MPI_Comm comm, MPI_Comm *newcomm, MPI_Request *request) -> int;
fn E_Comm_join(int fd, MPI_Comm *intercomm) -> int;
fn E_Comm_rank(MPI_Comm comm, int *rank) -> int;
fn E_Comm_remote_group(MPI_Comm comm, MPI_Group *group) -> int;
fn E_Comm_remote_size(MPI_Comm comm, int *size) -> int;
fn E_Comm_set_attr(MPI_Comm comm, int comm_keyval, void *attribute_val) -> int;
fn E_Comm_set_errhandler(MPI_Comm comm, MPI_Errhandler errhandler) -> int;
fn E_Comm_set_info(MPI_Comm comm, MPI_Info info) -> int;
fn E_Comm_set_name(MPI_Comm comm, const char *comm_name) -> int;
fn E_Comm_size(MPI_Comm comm, int *size) -> int;
fn E_Comm_split(MPI_Comm comm, int color, int key, MPI_Comm *newcomm) -> int;
fn E_Comm_split_type(MPI_Comm comm, int split_type, int key, MPI_Info info, MPI_Comm *newcomm) -> int;
fn E_Comm_test_inter(MPI_Comm comm, int *flag) -> int;
fn E_Compare_and_swap(const void *origin_addr, const void *compare_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Win win) -> int;
fn E_Dims_create(int nnodes, int ndims, int dims[]) -> int;
fn E_Dist_graph_create(MPI_Comm comm_old, int n, const int nodes[], const int degrees[], const int targets[], const int weights[], MPI_Info info, int reorder, MPI_Comm *newcomm) -> int;
fn E_Dist_graph_create_adjacent(MPI_Comm comm_old, int indegree, const int sources[], const int sourceweights[], int outdegree, const int destinations[], const int destweights[], MPI_Info info, int reorder, MPI_Comm *comm_dist_graph) -> int;
fn E_Dist_graph_neighbors(MPI_Comm comm, int maxindegree, int sources[], int sourceweights[], int maxoutdegree, int destinations[], int destweights[]) -> int;
fn E_Dist_graph_neighbors_count(MPI_Comm comm, int *inneighbors, int *outneighbors, int *weighted) -> int;
fn E_Errhandler_create(MPI_Handler_function *function, MPI_Errhandler *errhandler) -> int;
fn E_Errhandler_free(MPI_Errhandler *errhandler) -> int;
fn E_Errhandler_get(MPI_Comm comm, MPI_Errhandler *errhandler) -> int;
fn E_Errhandler_set(MPI_Comm comm, MPI_Errhandler errhandler) -> int;
fn E_Error_class(int errorcode, int *errorclass) -> int;
fn E_Error_string(int errorcode, char *string, int *resultlen) -> int;
fn E_Exscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) -> int;
fn E_Fetch_and_op(const void *origin_addr, void *result_addr, MPI_Datatype datatype, int target_rank, MPI_Aint target_disp, MPI_Op op, MPI_Win win) -> int;
fn E_File_call_errhandler(MPI_File fh, int errorcode) -> int;
fn E_File_close(MPI_File *fh) -> int;
fn E_File_create_errhandler(MPI_File_errhandler_function *function, MPI_Errhandler *errhandler) -> int;
fn E_File_delete(const char *filename, MPI_Info info) -> int;
fn E_File_get_amode(MPI_File fh, int *amode) -> int;
fn E_File_get_atomicity(MPI_File fh, int *flag) -> int;
fn E_File_get_byte_offset(MPI_File fh, MPI_Offset offset, MPI_Offset *disp) -> int;
fn E_File_get_errhandler(MPI_File file, MPI_Errhandler *errhandler) -> int;
fn E_File_get_group(MPI_File fh, MPI_Group *group) -> int;
fn E_File_get_info(MPI_File fh, MPI_Info *info_used) -> int;
fn E_File_get_position(MPI_File fh, MPI_Offset *offset) -> int;
fn E_File_get_position_shared(MPI_File fh, MPI_Offset *offset) -> int;
fn E_File_get_size(MPI_File fh, MPI_Offset *size) -> int;
fn E_File_get_type_extent(MPI_File fh, MPI_Datatype datatype, MPI_Aint *extent) -> int;
fn E_File_get_view(MPI_File fh, MPI_Offset *disp, MPI_Datatype *etype, MPI_Datatype *filetype, char *datarep) -> int;
fn E_File_iread(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_iread_all(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_iread_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_iread_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_iread_shared(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_iwrite(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_iwrite_all(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_iwrite_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_iwrite_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_iwrite_shared(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Request *request) -> int;
fn E_File_open(MPI_Comm comm, const char *filename, int amode, MPI_Info info, MPI_File *fh) -> int;
fn E_File_preallocate(MPI_File fh, MPI_Offset size) -> int;
fn E_File_read(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_read_all(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_read_all_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype) -> int;
fn E_File_read_all_end(MPI_File fh, void *buf, MPI_Status *status) -> int;
fn E_File_read_at(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_read_at_all(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_read_at_all_begin(MPI_File fh, MPI_Offset offset, void *buf, int count, MPI_Datatype datatype) -> int;
fn E_File_read_at_all_end(MPI_File fh, void *buf, MPI_Status *status) -> int;
fn E_File_read_ordered(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_read_ordered_begin(MPI_File fh, void *buf, int count, MPI_Datatype datatype) -> int;
fn E_File_read_ordered_end(MPI_File fh, void *buf, MPI_Status *status) -> int;
fn E_File_read_shared(MPI_File fh, void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_seek(MPI_File fh, MPI_Offset offset, int whence) -> int;
fn E_File_seek_shared(MPI_File fh, MPI_Offset offset, int whence) -> int;
fn E_File_set_atomicity(MPI_File fh, int flag) -> int;
fn E_File_set_errhandler(MPI_File file, MPI_Errhandler errhandler) -> int;
fn E_File_set_info(MPI_File fh, MPI_Info info) -> int;
fn E_File_set_size(MPI_File fh, MPI_Offset size) -> int;
fn E_File_set_view(MPI_File fh, MPI_Offset disp, MPI_Datatype etype, MPI_Datatype filetype, const char *datarep, MPI_Info info) -> int;
fn E_File_sync(MPI_File fh) -> int;
fn E_File_write(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_write_all(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_write_all_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype) -> int;
fn E_File_write_all_end(MPI_File fh, const void *buf, MPI_Status *status) -> int;
fn E_File_write_at(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_write_at_all(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_write_at_all_begin(MPI_File fh, MPI_Offset offset, const void *buf, int count, MPI_Datatype datatype) -> int;
fn E_File_write_at_all_end(MPI_File fh, const void *buf, MPI_Status *status) -> int;
fn E_File_write_ordered(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_File_write_ordered_begin(MPI_File fh, const void *buf, int count, MPI_Datatype datatype) -> int;
fn E_File_write_ordered_end(MPI_File fh, const void *buf, MPI_Status *status) -> int;
fn E_File_write_shared(MPI_File fh, const void *buf, int count, MPI_Datatype datatype, MPI_Status *status) -> int;
fn E_Finalize( ) -> int;
fn E_Finalized(int *flag) -> int;
fn E_Free_mem(void *base) -> int;
fn E_Gather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) -> int;
fn E_Gatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm) -> int;
fn E_Get(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win) -> int;
fn E_Get_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win) -> int;
fn E_Get_address(const void *location, MPI_Aint *address) -> int;
fn E_Get_count(const MPI_Status *status, MPI_Datatype datatype, int *count) -> int;
fn E_Get_elements(const MPI_Status *status, MPI_Datatype datatype, int *count) -> int;
fn E_Get_elements_x(const MPI_Status *status, MPI_Datatype datatype, MPI_Count *count) -> int;
fn E_Get_library_version(char *version, int *resultlen) -> int;
fn E_Get_processor_name(char *name, int *resultlen) -> int;
fn E_Get_version(int *version, int *subversion) -> int;
fn E_Graph_create(MPI_Comm comm_old, int nnodes, const int index[], const int edges[], int reorder, MPI_Comm *comm_graph) -> int;
fn E_Graph_get(MPI_Comm comm, int maxindex, int maxedges, int index[], int edges[]) -> int;
fn E_Graph_map(MPI_Comm comm, int nnodes, const int index[], const int edges[], int *newrank) -> int;
fn E_Graph_neighbors(MPI_Comm comm, int rank, int maxneighbors, int neighbors[]) -> int;
fn E_Graph_neighbors_count(MPI_Comm comm, int rank, int *nneighbors) -> int;
fn E_Graphdims_get(MPI_Comm comm, int *nnodes, int *nedges) -> int;
fn E_Grequest_complete(MPI_Request request) -> int;
fn E_Grequest_start(MPI_Grequest_query_function *query_fn, MPI_Grequest_free_function *free_fn, MPI_Grequest_cancel_function *cancel_fn, void *extra_state, MPI_Request *request) -> int;
fn E_Group_compare(MPI_Group group1, MPI_Group group2, int *result) -> int;
fn E_Group_difference(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) -> int;
fn E_Group_excl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup) -> int;
fn E_Group_free(MPI_Group *group) -> int;
fn E_Group_incl(MPI_Group group, int n, const int ranks[], MPI_Group *newgroup) -> int;
fn E_Group_intersection(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) -> int;
fn E_Group_range_excl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) -> int;
fn E_Group_range_incl(MPI_Group group, int n, int ranges[][3], MPI_Group *newgroup) -> int;
fn E_Group_rank(MPI_Group group, int *rank) -> int;
fn E_Group_size(MPI_Group group, int *size) -> int;
fn E_Group_translate_ranks(MPI_Group group1, int n, const int ranks1[], MPI_Group group2, int ranks2[]) -> int;
fn E_Group_union(MPI_Group group1, MPI_Group group2, MPI_Group *newgroup) -> int;
fn E_Iallgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Iallgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Iallreduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ialltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ialltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ialltoallw(const void *sendbuf, const int sendcounts[], const int sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const int rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ibarrier(MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ibcast(void *buffer, int count, MPI_Datatype datatype, int root, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ibsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Iexscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Igather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Igatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Improbe(int source, int tag, MPI_Comm comm, int *flag, MPI_Message *message, MPI_Status *status) -> int;
fn E_Imrecv(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Request *request) -> int;
fn E_Ineighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ineighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ineighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ineighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ineighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm, MPI_Request *request) -> int;
fn E_Info_create(MPI_Info *info) -> int;
fn E_Info_delete(MPI_Info info, const char *key) -> int;
fn E_Info_dup(MPI_Info info, MPI_Info *newinfo) -> int;
fn E_Info_free(MPI_Info *info) -> int;
fn E_Info_get(MPI_Info info, const char *key, int valuelen, char *value, int *flag) -> int;
fn E_Info_get_nkeys(MPI_Info info, int *nkeys) -> int;
fn E_Info_get_nthkey(MPI_Info info, int n, char *key) -> int;
fn E_Info_get_valuelen(MPI_Info info, const char *key, int *valuelen, int *flag, int i,vector * v) -> int;
fn E_Info_set(MPI_Info info, const char *key, const char *value) -> int;
fn E_Init(int *argc, char ***argv) -> int;
fn E_Init_thread(int *argc, char ***argv, int required, int *provided) -> int;
fn E_Initialized(int *flag) -> int;
fn E_Intercomm_create(MPI_Comm local_comm, int local_leader, MPI_Comm bridge_comm, int remote_leader, int tag, MPI_Comm *newintercomm) -> int;
fn E_Intercomm_merge(MPI_Comm intercomm, int high, MPI_Comm *newintercomm) -> int;
fn E_Iprobe(int source, int tag, MPI_Comm comm, int *flag, MPI_Status *status) -> int;
fn E_Irecv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ireduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ireduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Ireduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Irsend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Is_thread_main(int *flag) -> int;
fn E_Iscan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Iscatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Iscatterv(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Isend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Issend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Keyval_create(MPI_Copy_function *copy_fn, MPI_Delete_function *delete_fn, int *keyval, void *extra_state) -> int;
fn E_Keyval_free(int *keyval) -> int;
fn E_Lookup_name(const char *service_name, MPI_Info info, char *port_name) -> int;
fn E_Mprobe(int source, int tag, MPI_Comm comm, MPI_Message *message, MPI_Status *status) -> int;
fn E_Mrecv(void *buf, int count, MPI_Datatype type, MPI_Message *message, MPI_Status *status) -> int;
fn E_Neighbor_allgather(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) -> int;
fn E_Neighbor_allgatherv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int displs[], MPI_Datatype recvtype, MPI_Comm comm) -> int;
fn E_Neighbor_alltoall(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, MPI_Comm comm) -> int;
fn E_Neighbor_alltoallv(const void *sendbuf, const int sendcounts[], const int sdispls[], MPI_Datatype sendtype, void *recvbuf, const int recvcounts[], const int rdispls[], MPI_Datatype recvtype, MPI_Comm comm) -> int;
fn E_Neighbor_alltoallw(const void *sendbuf, const int sendcounts[], const MPI_Aint sdispls[], const MPI_Datatype sendtypes[], void *recvbuf, const int recvcounts[], const MPI_Aint rdispls[], const MPI_Datatype recvtypes[], MPI_Comm comm) -> int;
fn E_Op_commutative(MPI_Op op, int *commute) -> int;
fn E_Op_create(MPI_User_function *function, int commute, MPI_Op *op) -> int;
fn E_Op_free(MPI_Op *op) -> int;
fn E_Open_port(MPI_Info info, char *port_name) -> int;
fn E_Pack(const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, int outsize, int *position, MPI_Comm comm) -> int;
fn E_Pack_external(const char datarep[], const void *inbuf, int incount, MPI_Datatype datatype, void *outbuf, MPI_Aint outsize, MPI_Aint *position) -> int;
fn E_Pack_external_size(const char datarep[], int incount, MPI_Datatype datatype, MPI_Aint *size) -> int;
fn E_Pack_size(int incount, MPI_Datatype datatype, MPI_Comm comm, int *size) -> int;
fn E_Pcontrol(const int level) -> int;
fn E_Probe(int source, int tag, MPI_Comm comm, MPI_Status *status) -> int;
fn E_Publish_name(const char *service_name, MPI_Info info, const char *port_name) -> int;
fn E_Put(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win) -> int;
fn E_Query_thread(int *provided) -> int;
fn E_Raccumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request) -> int;
fn E_Recv(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Status *status) -> int;
fn E_Recv_init(void *buf, int count, MPI_Datatype datatype, int source, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Reduce(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, int root, MPI_Comm comm) -> int;
fn E_Reduce_local(const void *inbuf, void *inoutbuf, int count, MPI_Datatype datatype, MPI_Op op) -> int;
fn E_Reduce_scatter(const void *sendbuf, void *recvbuf, const int recvcounts[], MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) -> int;
fn E_Reduce_scatter_block(const void *sendbuf, void *recvbuf, int recvcount, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) -> int;
fn E_Register_datarep(const char *datarep, MPI_Datarep_conversion_function *read_conversion_fn, MPI_Datarep_conversion_function *write_conversion_fn, MPI_Datarep_extent_function *dtype_file_extent_fn, void *extra_state) -> int;
fn E_Request_free(MPI_Request *request) -> int;
fn E_Request_get_status(MPI_Request request, int *flag, MPI_Status *status) -> int;
fn E_Rget(void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request) -> int;
fn E_Rget_accumulate(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, void *result_addr, int result_count, MPI_Datatype result_datatype, int target_rank, MPI_Aint target_disp, int target_count, MPI_Datatype target_datatype, MPI_Op op, MPI_Win win, MPI_Request *request) -> int;
fn E_Rput(const void *origin_addr, int origin_count, MPI_Datatype origin_datatype, int target_rank, MPI_Aint target_disp, int target_cout, MPI_Datatype target_datatype, MPI_Win win, MPI_Request *request) -> int;
fn E_Rsend(const void *ibuf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) -> int;
fn E_Rsend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Scan(const void *sendbuf, void *recvbuf, int count, MPI_Datatype datatype, MPI_Op op, MPI_Comm comm) -> int;
fn E_Scatter(const void *sendbuf, int sendcount, MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) -> int;
fn E_Scatterv(const void *sendbuf, const int sendcounts[], const int displs[], MPI_Datatype sendtype, void *recvbuf, int recvcount, MPI_Datatype recvtype, int root, MPI_Comm comm) -> int;
fn E_Send(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) -> int;
fn E_Send_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Sendrecv(const void *sendbuf, int sendcount, MPI_Datatype sendtype, int dest, int sendtag, void *recvbuf, int recvcount, MPI_Datatype recvtype, int source, int recvtag, MPI_Comm comm, MPI_Status *status) -> int;
fn E_Sendrecv_replace(void *buf, int count, MPI_Datatype datatype, int dest, int sendtag, int source, int recvtag, MPI_Comm comm, MPI_Status *status) -> int;
fn E_Ssend(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm) -> int;
fn E_Ssend_init(const void *buf, int count, MPI_Datatype datatype, int dest, int tag, MPI_Comm comm, MPI_Request *request) -> int;
fn E_Start(MPI_Request *request) -> int;
fn E_Startall(int count, MPI_Request array_of_requests[]) -> int;
fn E_Status_set_cancelled(MPI_Status *status, int flag) -> int;
fn E_Status_set_elements(MPI_Status *status, MPI_Datatype datatype, int count) -> int;
fn E_Status_set_elements_x(MPI_Status *status, MPI_Datatype datatype, MPI_Count count) -> int;
fn E_Test(MPI_Request *request, int *flag, MPI_Status *status) -> int;
fn E_Test_cancelled(const MPI_Status *status, int *flag) -> int;
fn E_Testall(int count, MPI_Request array_of_requests[], int *flag, MPI_Status array_of_statuses[]) -> int;
fn E_Testany(int count, MPI_Request array_of_requests[], int *index, int *flag, MPI_Status *status) -> int;
fn E_Testsome(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]) -> int;
fn E_Topo_test(MPI_Comm comm, int *status) -> int;
fn E_Type_commit(MPI_Datatype *type) -> int;
fn E_Type_contiguous(int count, MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_create_darray(int size, int rank, int ndims, const int gsize_array[], const int distrib_array[], const int darg_array[], const int psize_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_create_f90_complex(int p, int r, MPI_Datatype *newtype) -> int;
fn E_Type_create_f90_integer(int r, MPI_Datatype *newtype) -> int;
fn E_Type_create_f90_real(int p, int r, MPI_Datatype *newtype) -> int;
fn E_Type_create_hindexed(int count, const int array_of_blocklengths[], const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_create_hindexed_block(int count, int blocklength, const MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_create_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_create_indexed_block(int count, int blocklength, const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_create_keyval(MPI_Type_copy_attr_function *type_copy_attr_fn, MPI_Type_delete_attr_function *type_delete_attr_fn, int *type_keyval, void *extra_state) -> int;
fn E_Type_create_resized(MPI_Datatype oldtype, MPI_Aint lb, MPI_Aint extent, MPI_Datatype *newtype) -> int;
fn E_Type_create_struct(int count, const int array_of_block_lengths[], const MPI_Aint array_of_displacements[], const MPI_Datatype array_of_types[], MPI_Datatype *newtype) -> int;
fn E_Type_create_subarray(int ndims, const int size_array[], const int subsize_array[], const int start_array[], int order, MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_delete_attr(MPI_Datatype type, int type_keyval) -> int;
fn E_Type_dup(MPI_Datatype type, MPI_Datatype *newtype) -> int;
fn E_Type_extent(MPI_Datatype type, MPI_Aint *extent) -> int;
fn E_Type_free(MPI_Datatype *type) -> int;
fn E_Type_free_keyval(int *type_keyval) -> int;
fn E_Type_get_attr(MPI_Datatype type, int type_keyval, void *attribute_val, int *flag) -> int;
fn E_Type_get_contents(MPI_Datatype mtype, int max_integers, int max_addresses, int max_datatypes, int array_of_integers[], MPI_Aint array_of_addresses[], MPI_Datatype array_of_datatypes[]) -> int;
fn E_Type_get_envelope(MPI_Datatype type, int *num_integers, int *num_addresses, int *num_datatypes, int *combiner) -> int;
fn E_Type_get_extent(MPI_Datatype type, MPI_Aint *lb, MPI_Aint *extent) -> int;
fn E_Type_get_extent_x(MPI_Datatype type, MPI_Count *lb, MPI_Count *extent) -> int;
fn E_Type_get_name(MPI_Datatype type, char *type_name, int *resultlen) -> int;
fn E_Type_get_true_extent(MPI_Datatype datatype, MPI_Aint *true_lb, MPI_Aint *true_extent) -> int;
fn E_Type_get_true_extent_x(MPI_Datatype datatype, MPI_Count *true_lb, MPI_Count *true_extent) -> int;
fn E_Type_hindexed(int count, int array_of_blocklengths[], MPI_Aint array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_hvector(int count, int blocklength, MPI_Aint stride, MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_indexed(int count, const int array_of_blocklengths[], const int array_of_displacements[], MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Type_lb(MPI_Datatype type, MPI_Aint *lb) -> int;
fn E_Type_match_size(int typeclass, int size, MPI_Datatype *type) -> int;
fn E_Type_set_attr(MPI_Datatype type, int type_keyval, void *attr_val) -> int;
fn E_Type_set_name(MPI_Datatype type, const char *type_name) -> int;
fn E_Type_size(MPI_Datatype type, int *size) -> int;
fn E_Type_size_x(MPI_Datatype type, MPI_Count *size) -> int;
fn E_Type_struct(int count, int array_of_blocklengths[], MPI_Aint array_of_displacements[], MPI_Datatype array_of_types[], MPI_Datatype *newtype) -> int;
fn E_Type_ub(MPI_Datatype mtype, MPI_Aint *ub) -> int;
fn E_Type_vector(int count, int blocklength, int stride, MPI_Datatype oldtype, MPI_Datatype *newtype) -> int;
fn E_Unpack(const void *inbuf, int insize, int *position, void *outbuf, int outcount, MPI_Datatype datatype, MPI_Comm comm) -> int;
fn E_Unpack_external(const char datarep[], const void *inbuf, MPI_Aint insize, MPI_Aint *position, void *outbuf, int outcount, MPI_Datatype datatype) -> int;
fn E_Unpublish_name(const char *service_name, MPI_Info info, const char *port_name) -> int;
fn E_Wait(MPI_Request *request, MPI_Status *status) -> int;
fn E_Waitall(int count, MPI_Request array_of_requests[], MPI_Status *array_of_statuses) -> int;
fn E_Waitany(int count, MPI_Request array_of_requests[], int *index, MPI_Status *status) -> int;
fn E_Waitsome(int incount, MPI_Request array_of_requests[], int *outcount, int array_of_indices[], MPI_Status array_of_statuses[]) -> int;
fn E_Win_allocate(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win) -> int;
fn E_Win_allocate_shared(MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, void *baseptr, MPI_Win *win) -> int;
fn E_Win_attach(MPI_Win win, void *base, MPI_Aint size) -> int;
fn E_Win_call_errhandler(MPI_Win win, int errorcode) -> int;
fn E_Win_complete(MPI_Win win) -> int;
fn E_Win_create(void *base, MPI_Aint size, int disp_unit, MPI_Info info, MPI_Comm comm, MPI_Win *win) -> int;
fn E_Win_create_dynamic(MPI_Info info, MPI_Comm comm, MPI_Win *win) -> int;
fn E_Win_create_errhandler(MPI_Win_errhandler_function *function, MPI_Errhandler *errhandler) -> int;
fn E_Win_create_keyval(MPI_Win_copy_attr_function *win_copy_attr_fn, MPI_Win_delete_attr_function *win_delete_attr_fn, int *win_keyval, void *extra_state) -> int;
fn E_Win_delete_attr(MPI_Win win, int win_keyval) -> int;
fn E_Win_detach(MPI_Win win, const void *base) -> int;
fn E_Win_fence(int assert, MPI_Win win) -> int;
fn E_Win_flush(int rank, MPI_Win win) -> int;
fn E_Win_flush_all(MPI_Win win) -> int;
fn E_Win_flush_local(int rank, MPI_Win win) -> int;
fn E_Win_flush_local_all(MPI_Win win) -> int;
fn E_Win_free(MPI_Win *win) -> int;
fn E_Win_free_keyval(int *win_keyval) -> int;
fn E_Win_get_attr(MPI_Win win, int win_keyval, void *attribute_val, int *flag) -> int;
fn E_Win_get_errhandler(MPI_Win win, MPI_Errhandler *errhandler) -> int;
fn E_Win_get_group(MPI_Win win, MPI_Group *group) -> int;
fn E_Win_get_info(MPI_Win win, MPI_Info *info_used) -> int;
fn E_Win_get_name(MPI_Win win, char *win_name, int *resultlen) -> int;
fn E_Win_lock(int lock_type, int rank, int assert, MPI_Win win) -> int;
fn E_Win_lock_all(int assert, MPI_Win win) -> int;
fn E_Win_post(MPI_Group group, int assert, MPI_Win win) -> int;
fn E_Win_set_attr(MPI_Win win, int win_keyval, void *attribute_val) -> int;
fn E_Win_set_errhandler(MPI_Win win, MPI_Errhandler errhandler) -> int;
fn E_Win_set_info(MPI_Win win, MPI_Info info) -> int;
fn E_Win_set_name(MPI_Win win, const char *win_name) -> int;
fn E_Win_shared_query(MPI_Win win, int rank, MPI_Aint *size, int *disp_unit, void *baseptr) -> int;
fn E_Win_start(MPI_Group group, int assert, MPI_Win win) -> int;
fn E_Win_sync(MPI_Win win) -> int;
fn E_Win_test(MPI_Win win, int *flag) -> int;
fn E_Win_unlock(int rank, MPI_Win win) -> int;
fn E_Win_unlock_all(MPI_Win win) -> int;
fn E_Win_wait(MPI_Win win) -> int;
fn E_Wtick() -> double;
fn E_Wtime() -> double;
